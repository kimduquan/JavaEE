<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>openup</groupId>
        <artifactId>OpenUP-parent</artifactId>
        <version>1.0.0</version>
    </parent>
    <artifactId>EPF-tests</artifactId>
    <name>Eclipse Process Framework Iteration Tests</name>
    <!-- Define variables that will be substituted in server.xml and
         passed to the integration tests -->
    <properties>
    	<httpHost>localhost</httpHost>
        <httpPort>9080</httpPort>
        <httpWebPort>80</httpWebPort>
        <httpsWebPort>443</httpsWebPort>
        <portalPort>8080</portalPort>
		<gatewayHost>localhost</gatewayHost>
        <gatewayPort>8443</gatewayPort>
		<internalHost>localhost</internalHost>
		<internalPort>8080</internalPort>
		<userHome>~/</userHome>
        <!-- Jaeger configuration -->
        <liberty.env.JAEGER_SAMPLER_TYPE>const</liberty.env.JAEGER_SAMPLER_TYPE>
        <liberty.env.JAEGER_SAMPLER_PARAM>1</liberty.env.JAEGER_SAMPLER_PARAM>
    	<!--<liberty.env.WLP_LOGGING_MESSAGE_FORMAT>json</liberty.env.WLP_LOGGING_MESSAGE_FORMAT>
    	<liberty.env.WLP_LOGGING_MESSAGE_SOURCE>message,trace,accessLog,ffdc,audit</liberty.env.WLP_LOGGING_MESSAGE_SOURCE>-->
		<liberty.env.epf_schedule_url>http://${httpHost}:${httpPort}/schedule/schedule/</liberty.env.epf_schedule_url>
		<liberty.env.epf_config_url>http://${httpHost}:9184/config/config/</liberty.env.epf_config_url>
		<liberty.env.epf_script_url>http://${httpHost}:${httpPort}/script/script/</liberty.env.epf_script_url>
		<liberty.env.epf_file_url>http://${httpHost}:${httpPort}/file/file/</liberty.env.epf_file_url>
		<liberty.env.epf_mail_url>http://${httpHost}:${httpPort}/mail/mail/</liberty.env.epf_mail_url>
		<liberty.env.epf_image_url>http://${httpHost}:${httpPort}/image/image/</liberty.env.epf_image_url>
		<liberty.env.epf_rules_url>http://${httpHost}:${httpPort}/rules/rules/</liberty.env.epf_rules_url>
		<liberty.env.epf_planning_url>http://${httpHost}:${httpPort}/planning/planning/</liberty.env.epf_planning_url>
		<liberty.env.epf_persistence_url>http://${httpHost}:9181/persistence/persistence/</liberty.env.epf_persistence_url>
		<liberty.env.epf_schema_url>http://${httpHost}:9181/persistence/schema/</liberty.env.epf_schema_url>
		<liberty.env.epf_security_url>http://${httpHost}:${httpPort}/security/security/</liberty.env.epf_security_url>
		<liberty.env.epf_security_management_url>http://${httpHost}:${httpPort}/security-management/security/</liberty.env.epf_security_management_url>
		<liberty.env.epf_transaction_url>http://${httpHost}:9182/transaction/transaction/</liberty.env.epf_transaction_url>
        <liberty.env.epf_security_webapp_url>https://localhost/security/</liberty.env.epf_security_webapp_url>
        <liberty.env.epf_gateway_url>https://${gatewayHost}:${gatewayPort}/gateway/</liberty.env.epf_gateway_url>
        <liberty.env.epf_gateway_messaging_url>ws://${gatewayHost}:${internalPort}/messaging/</liberty.env.epf_gateway_messaging_url>
        <liberty.env.epf_messaging_url>ws://${httpHost}:9183/messaging/messaging/</liberty.env.epf_messaging_url>
        <liberty.env.epf_cache_url>http://${httpHost}:9187/cache/cache/</liberty.env.epf_cache_url>
        <liberty.env.epf_query_url>http://${httpHost}:${httpPort}/query/query/</liberty.env.epf_query_url>
        <liberty.env.epf_registry_url>http://${httpHost}:${httpPort}/registry/registry/</liberty.env.epf_registry_url>
		<liberty.env.epf_management_url>http://${httpHost}:${httpPort}/management/management/</liberty.env.epf_management_url>
		<liberty.env.epf_portlet_url>http://localhost:${portalPort}/pluto/portal</liberty.env.epf_portlet_url>
		<liberty.env.epf_webapp_url>http://localhost/webapp/</liberty.env.epf_webapp_url>
		<liberty.env.epf_health_url>http://${httpHost}:${httpPort}/health/</liberty.env.epf_health_url>
		<liberty.env.epf_batch_api_url>http://${httpHost}:${httpPort}/ibm/</liberty.env.epf_batch_api_url>
		<liberty.env.epf_net_url>http://${httpHost}:9186/net/net/</liberty.env.epf_net_url>
		<liberty.env.epf_net_http_port>${httpPort}</liberty.env.epf_net_http_port>
		<liberty.env.epf_client_net_ssl_keyStorePassword>changeit</liberty.env.epf_client_net_ssl_keyStorePassword>
		<liberty.env.epf_client_net_ssl_keyAlias>localhost</liberty.env.epf_client_net_ssl_keyAlias>
		<liberty.env.epf_client_net_ssl_keyPassword>changeit</liberty.env.epf_client_net_ssl_keyPassword>
		<liberty.env.epf_client_net_ssl_keyStoreType>PKCS12</liberty.env.epf_client_net_ssl_keyStoreType>
		<liberty.env.epf_client_net_ssl_trustStorePassword>changeit</liberty.env.epf_client_net_ssl_trustStorePassword>
		<liberty.env.epf_client_net_ssl_trustStoreType>PKCS12</liberty.env.epf_client_net_ssl_trustStoreType>
		<liberty.env.mp_jwt_verify_issuer>EPF</liberty.env.mp_jwt_verify_issuer>
    </properties>
    <dependencies>
    	<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser -->
		<dependency>
		    <groupId>org.apache.lucene</groupId>
		    <artifactId>lucene-queryparser</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
		    <groupId>org.postgresql</groupId>
		    <artifactId>postgresql</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
		<dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse.jetty.websocket/javax-websocket-client-impl -->
		<dependency>
		    <groupId>org.eclipse.jetty.websocket</groupId>
		    <artifactId>javax-websocket-client-impl</artifactId>
	    	<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.glassfish/javax.json -->
		<dependency>
		    <groupId>org.glassfish</groupId>
		    <artifactId>javax.json</artifactId>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.json/javax.json-api -->
		<dependency>
		    <groupId>javax.json</groupId>
		    <artifactId>javax.json-api</artifactId>
		    <scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api -->
		<dependency>
		    <groupId>jakarta.annotation</groupId>
		    <artifactId>jakarta.annotation-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.eclipse/yasson -->
		<dependency>
		    <groupId>org.eclipse</groupId>
		    <artifactId>yasson</artifactId>
		    <scope>test</scope>
		</dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-schema-utility</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-delivery-processes-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-roles-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-tasks-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-work-products-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-net-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-transaction-schema</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-schema</artifactId>
            <version>${project.version}</version>
			<type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-messaging-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-persistence-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-query-client</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-file-utility</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-portlet-naming</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-portlet-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security-view</artifactId>
            <version>${project.version}</version>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-schedule</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-shell-schedule</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-batch</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-script</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-security-management</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-file</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-mail</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-image</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-rules</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-planning</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-registry</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
		<dependency>
            <groupId>openup</groupId>
            <artifactId>EPF-management</artifactId>
            <version>${project.version}</version>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-mp-client</artifactId>
		    <scope>test</scope>
        </dependency>
        <dependency>
		    <groupId>org.apache.cxf</groupId>
		    <artifactId>cxf-rt-rs-sse</artifactId>
		    <scope>test</scope>
		</dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
		    <scope>test</scope>
        </dependency>
        <dependency>
		    <groupId>org.jboss.weld</groupId>
		    <artifactId>weld-junit4</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
		    <groupId>org.seleniumhq.selenium</groupId>
		    <artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
    </dependencies>
    <build>
        <!-- Enable resource filtering so that variables in server.xml get substituted -->
        <testResources>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- Prevent surefire from executing integration tests as unit tests -->
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <!-- Pass contextPath and httpPort to the integration tests -->
                    <systemPropertyVariables>
						<epf.schedule.url>http://localhost:${httpPort}/schedule/schedule/</epf.schedule.url>
						<epf.config.url>http://localhost:${httpPort}/config/config/</epf.config.url>
						<epf.script.url>http://localhost:${httpPort}/script/script/</epf.script.url>
						<epf.file.url>http://localhost:${httpPort}/file/file/</epf.file.url>
						<epf.mail.url>http://localhost:${httpPort}/mail/mail/</epf.mail.url>
						<epf.image.url>http://localhost:${httpPort}/image/image/</epf.image.url>
						<epf.rules.url>http://localhost:${httpPort}/rules/rules/</epf.rules.url>
						<epf.planning.url>http://localhost:${httpPort}/planning/planning/</epf.planning.url>
						<epf.persistence.url>http://localhost:9181/persistence/persistence/</epf.persistence.url>
						<epf.schema.url>http://localhost:9181/persistence/schema/</epf.schema.url>
						<epf.security.url>http://localhost:${httpPort}/security/security/</epf.security.url>
						<epf.security.management.url>http://localhost:${httpPort}/security-management/security/</epf.security.management.url>
                        <epf.security.webapp.url>https://localhost/security/</epf.security.webapp.url>
                        <epf.transaction.url>http://localhost:9182/transaction/transaction/</epf.transaction.url>
                        <epf.gateway.url>https://localhost:${gatewayPort}/gateway/</epf.gateway.url>
                        <epf.gateway.health.url>https://localhost:${gatewayPort}/q/health/</epf.gateway.health.url>
                        <epf.gateway.messaging.url>ws://localhost:${internalPort}/messaging/</epf.gateway.messaging.url>
                        <epf.registry.url>http://localhost:${httpPort}/registry/registry/</epf.registry.url>
						<epf.management.url>http://localhost:${httpPort}/management/management/</epf.management.url>
                        <epf.messaging.url>ws://localhost:${httpPort}/messaging/messaging/</epf.messaging.url>
                        <epf.cache.url>http://localhost:${httpPort}/cache/cache/</epf.cache.url>
                        <epf.query.url>http://localhost:${httpPort}/query/query/</epf.query.url>
                        <epf.portlet.url>http://localhost:${portalPort}/pluto/portal</epf.portlet.url>
                        <epf.webapp.url>https://localhost/webapp/</epf.webapp.url>
                        <epf.health.url>http://localhost:${httpPort}/health/</epf.health.url>
						<epf.batch.api.url>http://localhost:${httpPort}/ibm/</epf.batch.api.url>
						<epf.net.url>http://localhost:${httpPort}/net/net/</epf.net.url>
						<epf.net.http.port>${httpPort}</epf.net.http.port>
                        <epf.shell.path>../EPF-shell/</epf.shell.path>
                        <epf.shell.runner>${shell_runner}</epf.shell.runner>
                        <webdriver.gecko.driver>${geckodriver}</webdriver.gecko.driver>
                        <epf.tests.file.root>target/servers/test/epf.file.root</epf.tests.file.root>
                        <webdriver.timeouts.implicit>60</webdriver.timeouts.implicit>
                        <webdriver.firefox.headless>true</webdriver.firefox.headless>
						<epf.client.net.ssl.keyStore>${project.basedir}/dev.p12</epf.client.net.ssl.keyStore>
						<epf.client.net.ssl.keyStorePassword>changeit</epf.client.net.ssl.keyStorePassword>
						<epf.client.net.ssl.keyAlias>localhost</epf.client.net.ssl.keyAlias>
						<epf.client.net.ssl.keyPassword>changeit</epf.client.net.ssl.keyPassword>
						<epf.client.net.ssl.keyStoreType>PKCS12</epf.client.net.ssl.keyStoreType>
						<epf.client.net.ssl.trustStore>${project.basedir}/dev.p12</epf.client.net.ssl.trustStore>
						<epf.client.net.ssl.trustStorePassword>changeit</epf.client.net.ssl.trustStorePassword>
						<epf.client.net.ssl.trustStoreType>PKCS12</epf.client.net.ssl.trustStoreType>
						<webdriver.firefox.binary>C:\Program Files\Mozilla Firefox\firefox.exe</webdriver.firefox.binary>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.openliberty.tools</groupId>
                <artifactId>liberty-maven-plugin</artifactId>
                <executions>
                    <!-- Create server with custom server.xml -->
                    <execution>
                        <id>create-server</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                        <configuration>
                            <!-- Use server.xml from target/ directory with variables replaced -->
                            <serverXmlFile>${project.build.testOutputDirectory}/wlp/server.xml</serverXmlFile>
                        </configuration>
                    </execution>
                    <!-- Install application in <dependencies/> into apps/ directory -->
                    <execution>
                        <id>install-apps</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                        <configuration>
                            <!-- Drop application into apps/ directory -->
                            <appsDirectory>apps</appsDirectory>
							<copyDependencies>
								<dependencyGroup>
									<location>${project.build.directory}/shared/resources/epf/persistence</location>
	                                <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
									<dependency>
									    <groupId>org.postgresql</groupId>
			    						<artifactId>postgresql</artifactId>
									</dependency>
								</dependencyGroup>
								<dependencyGroup>
									<location>${project.build.directory}/shared/resources/epf/security</location>
									<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
									<dependency>
										<groupId>com.h2database</groupId>
										<artifactId>h2</artifactId>
									</dependency>
								</dependencyGroup>
								<dependencyGroup>
									<location>${project.build.directory}/shared/resources/epf/search</location>
									<!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser -->
									<dependency>
									    <groupId>org.apache.lucene</groupId>
									    <artifactId>lucene-queryparser</artifactId>
									</dependency>
								</dependencyGroup>
                            </copyDependencies>
                        </configuration>
                    </execution>
                    <!-- Start the server -->
                    <execution>
                        <id>start-liberty-server</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <verifyTimeout>600</verifyTimeout>
                            <serverStartTimeout>600</serverStartTimeout>
                            <applications>EPF-schedule,EPF-script,EPF-batch,EPF-file,EPF-mail,EPF-image,EPF-rules,EPF-planning,EPF-schema,EPF-registry,EPF-management,EPF-security,EPF-security-management</applications>
                        </configuration>
                    </execution>
                    <!-- Stop the server -->
                    <execution>
                        <id>stop-liberty-server</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <installDirectory>${liberty.install.dir}</installDirectory>
                    <userDirectory>${project.build.directory}</userDirectory>
                    <serverName>test</serverName>
                    <deployPackages>dependencies</deployPackages>
					<verifyTimeout>600</verifyTimeout>
					<serverStartTimeout>600</serverStartTimeout>
					<applications>EPF-schedule,EPF-script,EPF-batch,EPF-file,EPF-mail,EPF-image,EPF-rules,EPF-planning,EPF-schema,EPF-registry,EPF-management,EPF-security,EPF-security-management</applications>
					<dockerRunOpts>-p 7286:7286</dockerRunOpts>
				</configuration>
            </plugin>
			<plugin>
				<groupId>com.lazerycode.jmeter</groupId>
				<artifactId>jmeter-maven-plugin</artifactId>
				<executions>
					<!-- Generate JMeter configuration -->
					<execution>
						<id>configuration</id>
						<goals>
							<goal>configure</goal>
						</goals>
					</execution>
					<!-- Run JMeter tests -->
					<execution>
						<id>jmeter-tests</id>
						<goals>
							<goal>jmeter</goal>
						</goals>
					</execution>
					<!-- Fail build on errors in test -->
					<execution>
						<id>jmeter-check-results</id>
						<goals>
							<goal>results</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
        </plugins>
    </build>
    <profiles>
		<profile>
			<id>Linux</id>
			<activation>
				<os>
					<name>Linux</name>
				</os>
			</activation>
			<properties>
				<httpHost>localhost</httpHost>
				<liberty.env.epf_client_net_ssl_keyStore>~/git/JavaEE/OpenUP/dev.p12</liberty.env.epf_client_net_ssl_keyStore>
				<liberty.env.epf_client_net_ssl_trustStore>~/git/JavaEE/OpenUP/dev.p12</liberty.env.epf_client_net_ssl_trustStore>
				<liberty.env.mp_jwt_decrypt_key_location>~/git/JavaEE/OpenUP/private.pem</liberty.env.mp_jwt_decrypt_key_location>
				<liberty.env.epf_security_jwt_decrypt_key_location>~/git/JavaEE/OpenUP/private.pem</liberty.env.epf_security_jwt_decrypt_key_location>
				<liberty.env.mp_jwt_verify_publickey_location>~/git/JavaEE/OpenUP/public.pem</liberty.env.mp_jwt_verify_publickey_location>
				<liberty.env.epf_security_jwt_verify_publickey_location>~/git/JavaEE/OpenUP/public.pem</liberty.env.epf_security_jwt_verify_publickey_location>
        		<geckodriver>./geckodriver</geckodriver>
        		<shell_runner>./target/EPF-shell-${project.version}-runner</shell_runner>
        		<opencv_java>/usr/share/java/opencv-420.jar</opencv_java>
        		<opencv_core>/usr/lib/x86_64-linux-gnu/libopencv_core.so</opencv_core>
			</properties>
		</profile>
		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<httpHost>localhost</httpHost>
				<liberty.env.epf_client_net_ssl_keyStore>C://GIT/JavaEE/OpenUP/dev.p12</liberty.env.epf_client_net_ssl_keyStore>
				<liberty.env.epf_client_net_ssl_trustStore>C://GIT/JavaEE/OpenUP/dev.p12</liberty.env.epf_client_net_ssl_trustStore>
				<liberty.env.mp_jwt_decrypt_key_location>C://GIT/JavaEE/OpenUP/private.pem</liberty.env.mp_jwt_decrypt_key_location>
				<liberty.env.epf_security_jwt_decrypt_key_location>C://GIT/JavaEE/OpenUP/private.pem</liberty.env.epf_security_jwt_decrypt_key_location>
				<liberty.env.mp_jwt_verify_publickey_location>C://GIT/JavaEE/OpenUP/public.pem</liberty.env.mp_jwt_verify_publickey_location>
				<liberty.env.epf_security_jwt_verify_publickey_location>C://GIT/JavaEE/OpenUP/public.pem</liberty.env.epf_security_jwt_verify_publickey_location>
        		<geckodriver>./geckodriver.exe</geckodriver>
        		<shell_runner>C://GIT/JavaEE/OpenUP/EPF-shell/target/EPF-shell-${project.version}-runner.exe</shell_runner>
        		<opencv_java>C://Program Files/opencv/build/java/opencv-452.jar</opencv_java>
        		<opencv_core>C://Program Files/opencv/build/java/x64/opencv_java452.dll</opencv_core>
			</properties>
		</profile>
		<profile>
			<id>Container</id>
			<properties>
				<httpHost>openup.default.svc.cluster.local</httpHost>
				<gatewayHost>epf-gateway.default.svc.cluster.local</gatewayHost>
				<internalHost>epf-gateway-internal.default.svc.cluster.local</internalHost>
				<userHome>/liberty/usr/</userHome>
				<liberty.jvm.JAEGER_AGENT_HOST>-DJAEGER_AGENT_HOST=jaeger-agent.default.svc.cluster.local</liberty.jvm.JAEGER_AGENT_HOST>
				<liberty.jvm.HAZELCAST_KUBERNETES_SERVICE_DNS>-Dhazelcast.kubernetes.service-dns=hazelcast.default.svc.cluster.local</liberty.jvm.HAZELCAST_KUBERNETES_SERVICE_DNS>
				<liberty.bootstrap.hazelcast.kubernetes.service-dns>hazelcast.default.svc.cluster.local</liberty.bootstrap.hazelcast.kubernetes.service-dns>
				<!--<liberty.bootstrap.hazelcast.jcache.provider.type>member</liberty.bootstrap.hazelcast.jcache.provider.type>-->
				<liberty.env.epf_persistence_url>http://epf-persistence.default.svc.cluster.local:9181/persistence/persistence/</liberty.env.epf_persistence_url>
				<liberty.env.epf_schema_url>http://epf-persistence.default.svc.cluster.local:9181/persistence/schema/</liberty.env.epf_schema_url>
				<liberty.env.epf_transaction_url>http://epf-transaction.default.svc.cluster.local:9182/transaction/transaction/</liberty.env.epf_transaction_url>
				<liberty.env.epf_messaging_url>ws://epf-messaging.default.svc.cluster.local:9183/messaging/</liberty.env.epf_messaging_url>
				<liberty.env.epf_config_url>http://epf-config.default.svc.cluster.local:9184/config/</liberty.env.epf_config_url>
				<liberty.env.epf_net_url>http://epf-net.default.svc.cluster.local:9186/net/</liberty.env.epf_net_url>
				<liberty.env.epf_cache_url>http://epf-cache.default.svc.cluster.local:9187/cache/cache/</liberty.env.epf_cache_url>
				<liberty.env.epf_query_url>http://epf-query.default.svc.cluster.local:9188/query/query/</liberty.env.epf_query_url>
				<liberty.env.epf_client_net_ssl_keyStore>/dev.p12</liberty.env.epf_client_net_ssl_keyStore>
				<liberty.env.epf_client_net_ssl_trustStore>/dev.p12</liberty.env.epf_client_net_ssl_trustStore>
				<liberty.env.mp_jwt_decrypt_key_location>/private.pem</liberty.env.mp_jwt_decrypt_key_location>
				<liberty.env.epf_security_jwt_decrypt_key_location>/private.pem</liberty.env.epf_security_jwt_decrypt_key_location>
				<liberty.env.mp_jwt_verify_publickey_location>/public.pem</liberty.env.mp_jwt_verify_publickey_location>
				<liberty.env.epf_security_jwt_verify_publickey_location>/public.pem</liberty.env.epf_security_jwt_verify_publickey_location>
        		<geckodriver>./geckodriver.exe</geckodriver>
        		<shell_runner>C://GIT/JavaEE/OpenUP/EPF-shell/target/EPF-shell-${project.version}-runner.exe</shell_runner>
        		<opencv_java>/usr/share/java/opencv-420.jar</opencv_java>
        		<opencv_core>/usr/lib/x86_64-linux-gnu/libopencv_core.so</opencv_core>
			</properties>
		</profile>
	</profiles>
</project>
