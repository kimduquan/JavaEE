jnosql.document.database=epf_nosql_document
#jnosql.mongodb.host=mongodb.default.svc.cluster.local:27017
jnosql.column.database=epf_nosql_column
#jnosql.cassandra.host=cassandra.default.svc.cluster.local
jnosql.cassandra.query.1=CREATE KEYSPACE IF NOT EXISTS epf_nosql_column WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 1};
jnosql.cassandra.query.2=CREATE COLUMNFAMILY IF NOT EXISTS epf_nosql_column.Event (id uuid, type ascii, specVersion ascii, source ascii, subject text, time timestamp, dataContentType ascii, dataSchema ascii, data text, PRIMARY KEY ((source, type), id));
jnosql.cassandra.query.3=ALTER COLUMNFAMILY epf_nosql_column.Event ADD (name ascii, workflowDefinition ascii , eventDefinition ascii, state text);
jnosql.cassandra.query.4=CREATE INDEX IF NOT EXISTS ON epf_nosql_column.Event (name);
jnosql.cassandra.query.5=ALTER COLUMNFAMILY epf_nosql_column.Event ADD (onEventsDefinition int);
datastax-java-driver.basic.request.timeout=PT59S
mp.messaging.connector.smallrye-kafka.bootstrap.servers=localhost:9092
mp.messaging.incoming.workflow.connector=smallrye-kafka
mp.messaging.incoming.workflow.topic=epf.nosql.event
mp.messaging.incoming.workflow.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.workflow.value.deserializer=epf.messaging.util.io.JsonDeserializer
mp.messaging.incoming.workflow.group.id=epf-nosql